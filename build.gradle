plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.diffplug.spotless' version '6.0.4'
	id 'checkstyle'
	id 'org.owasp.dependencycheck' version '6.5.3'
	id 'com.github.spotbugs' version '5.0.6'
}

group = 'com.helios'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	testcontainersVersion = '1.16.2'
	mapStructVersion = '1.4.2.Final'
	queryDslVersion = '5.0.0'
	automatedBuild = false
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	/*implementation 'org.springframework.boot:spring-boot-starter-security'*/
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor "com.querydsl:querydsl-apt:$queryDslVersion:jpa"
	implementation "com.querydsl:querydsl-jpa:$queryDslVersion"

	implementation 'org.hibernate:hibernate-validator:7.0.2.Final'
	implementation 'org.hibernate:hibernate-envers:5.6.7.Final'

	implementation "org.mapstruct:mapstruct:$mapStructVersion"
	annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
	annotationProcessor "javax.annotation:javax.annotation-api:1.3.2"
	annotationProcessor "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	/*testImplementation 'org.springframework.security:spring-security-test'*/
	// testImplementation 'com.h2database:h2:2.0.204'
	testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
	testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
	testImplementation "org.testcontainers:postgresql:$testcontainersVersion"

	// Need to be included in order to trigger security checks
	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

test {
	useJUnitPlatform()
}

// Spotless configuration
spotless {
	java {
		targetExclude(project.fileTree(project.buildDir) {
			include('**/*.java')
		})
		googleJavaFormat '1.13.0'
	}
}

gradle.projectsEvaluated {
	checkstyleMain.dependsOn(spotlessApply)
	build.dependsOn(spotlessApply)
	// build.dependsOn(dependencyCheckAnalyze) // disabled at the moment
}

// Set default component model to 'spring', thus we can avoid to set attribute on @Mapper annotation
tasks.withType(JavaCompile) {
	options.compilerArgs = [
			'-Amapstruct.suppressGeneratorTimestamp=true',
			'-Amapstruct.defaultComponentModel=spring'
	]
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', 'build/generated/sources/annotationProcessor/java/main']
		}
	}
}

// Tell checkstyle to verify only files in src/main/java
checkstyleMain {
	source = fileTree('src/main/java')
}

// SpotBugs configuration
spotbugs {
	effort = "max"
	reportLevel = "high"
	// includeFilter = file("findbugs-exclude.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
	reports {
		xml.enabled = false
		html.enabled = true
		ignoreFailures = false
	}
}

// OWASP dependency check configuration
dependencyCheck {
	failBuildOnCVSS = 7 // Low [0-3.9], Medium [4-6.9], High [7-10]
	cveValidForHours = 8
	suppressionFiles = ["${rootDir}/config/dependencyCheck/suppression.xml"]
}

